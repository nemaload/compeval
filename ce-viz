#!/usr/bin/perl

use warnings;
use strict;
use v5.10;

use FindBin;
use lib $FindBin::Bin;

use compeval::Task;

my $dot;


sub print_workflow {
	my ($workflow) = @_;

	if ($workflow->kind eq 'input') {
		printf $dot '"%s" [label="INPUT %s"]'."\n", $workflow->name, $workflow->value;

	} elsif ($workflow->kind eq 'literal') {
		printf $dot '"%s" [label="FILE %s"]'."\n", $workflow->name, $workflow->value;

	} elsif ($workflow->kind eq 'computation') {
		my $compname = $workflow->value;
		my $computation = $workflow->computation();
		printf $dot '"%s" [label="%s"]'."\n", $workflow->name, $compname;

		# Recurse to inputs, connect them with edges
		for my $input ($workflow->inputs) {
			my $inpworkflow = $workflow->input($input);

			# Print subtree

			print_workflow($inpworkflow);

			# Connect the subtree

			my @compinput = ($workflow->computation()->inputs)[$input->{seqno_start}..$input->{seqno_end}];
			my @compoutput = $inpworkflow->kind eq 'computation' ? ($inpworkflow->computation()->outputs)[$inpworkflow->outputs_slice] : ();

			my $label = sprintf('%s : %s%s', join(', ', @compinput), $input->{label}, @compoutput ? ' ['.join(', ', @compoutput).']' : '');
			printf $dot '"%s" -> "%s" [label="%s"]'."\n", $inpworkflow->name, $workflow->name, $label;
		}
	}
}


my $task = compeval::Task->new('.');

open $dot, '|-', 'dot', '-Tx11' or die "dot: $!";
say $dot 'digraph {';
say $dot 'graph [rankdir="LR", nodesep=1]';

print_workflow($task->workflow());

say $dot '}';
